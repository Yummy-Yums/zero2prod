write a module to send an email;
• adapt the logic of our existing POST /subscriptions request handler to match the new re-
quirements;
• write a GET /subscriptions/confirm request handler from scratch.



POST /subscriptions will:
• add the subscriber details to the database in the subscriptions table, with status equal to
pending_confirmation;
• generate a (unique) subscription_token;
• store subscription_token in our database against the subscriber id in a
subscription_tokens table;
• send an email to the new subscriber containing a link structured as
https://<api-domain>/subscriptions/confirm?token=<subscription_token>;
• return a 200 OK.
Once they click on the link, a browser tab will open up and a GET request will be fired to our GET
/subscriptions/confirm endpoint. The request handler will:
• retrieve subscription_token from the query parameters;
• retrieve the subscriber id associated with subscription_token from the
subscription_tokens table;
• update the subscriber status from pending_confirmation to active in the subscriptions
table;
• return a 200 OK.